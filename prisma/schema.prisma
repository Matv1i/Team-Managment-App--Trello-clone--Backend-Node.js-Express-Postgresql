// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId String @id @default(uuid())
  email String? 
  username String @unique
  profilePictureUrl String?
  teamId String?
  password String?


  authoredTasks Task[] @relation("TaskAuthor")
  assignedTask Task[] @relation("TaskAssignee")

  comments Comment[]
  managedTeams Team[] @relation("ProjectManager")
  team Team? @relation(fields: [teamId], references: [id])




}

model Team{
  id String @id @default(uuid())
  teamName String 
  productOwnerUserId String
  projectManagerUserId String
  projectManager User @relation("ProjectManager", fields: [projectManagerUserId], references: [userId])
  projectTeams ProjectTeam[]
  user User[]

}

model Project {
  id String @id @default(uuid())
  name String
  description String?
  startDate DateTime?
  endDate DateTime?
  tasks Task[]
  projectTeams ProjectTeam[]


}
model ProjectTeam{
  id String @id @default(uuid())
  teamId String
  projectId String 
  team Team? @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}



model Task {
  id String @id @default(uuid())
  title String
  description String?
  status String?
  priority String?
  tags String?
  startDate DateTime?
  dueDate DateTime?
  points String?
  projectId String
  authorUserId String
  assignedUserId String?

  project Project @relation(fields: [projectId], references: [id])
  author User @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee User? @relation("TaskAssignee", fields: [assignedUserId], references: [userId])




  comments Comment[]
}



model Comment{
  id String @id @default(uuid())
  text String
  taskId String
  userId String


  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}